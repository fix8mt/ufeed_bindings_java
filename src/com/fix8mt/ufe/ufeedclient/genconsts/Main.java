package com.fix8mt.ufe.ufeedclient.genconsts;

import gnu.getopt.Getopt;
import gnu.getopt.LongOpt;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Main {

	public static void main(String[] args) {
		try {
			LongOpt[] opts = {
				new LongOpt("fix", LongOpt.REQUIRED_ARGUMENT, null, 'f'),
				new LongOpt("ufe", LongOpt.REQUIRED_ARGUMENT, null, 'u'),
				new LongOpt("out", LongOpt.REQUIRED_ARGUMENT, null, 'o')
			};
			Getopt g = new Getopt("ufe.ufeedclient.genconsts", args, "f:u:o:", opts);
			g.setOpterr(false);
			int c;
			String fixPath = null, ufePath = null, outPath = null;
			while ((c = g.getopt()) != -1) {
				switch (c) {
					case 'f':
						fixPath = g.getOptarg();
						break;
					case 'u':
						ufePath = g.getOptarg();
						break;
					case 'o':
						outPath = g.getOptarg();
						break;
					default:
						printUsage();
						return;
				}
			}
			if (fixPath == null || fixPath.length() == 0 || ufePath == null || ufePath.length() == 0 || outPath == null || outPath.length() == 0) {
				printUsage();
				return;
			}
			generateConsts(fixPath, ufePath, outPath);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void printUsage() {
		System.err.println(
			"ufe.ufeedclient.genconsts -- generate consts for ufeedclient\n" +
			"\t-f=, --fix=	sets FIX fields path to field.hpp\n" +
			"\t-u=, --ufe= sets UFE fields path to ufeconsts.hpp\n" +
			"\t-o=, --out= sets Java output path to Consts.java\n"
		);
	}

	private static void generateConsts(String fixPath, String ufePath, String outPath) throws IOException {
		Pattern p1 = Pattern.compile("constexpr\\s*int64_t\\s*(.*)\\(.*([0-9]{5});.*");
		Pattern p2 = Pattern.compile("const int64_t (\\S*)\\s*\\{\\s*(\\d+)\\s.*");
		Pattern p3 = Pattern.compile("const int64_t (\\S*)\\s*\\{\\s*(0[xX][0-9a-fA-F]+)\\s.*");
		Pattern p4 = Pattern.compile("const int64_t (\\S*)\\s*\\{\\s*(.*)\\(([0-9]*)\\).*");
		Pattern p5 = Pattern.compile("const .* (Common.*)\\((\\S*)\\).*");
		try (BufferedWriter bw = new BufferedWriter(new FileWriter(outPath))) {
			HashMap<String, Integer> ufeOffsets = new HashMap<>();
			bw.write(
"// THIS FILE HAS BEEN AUTOGENERATED ON {DateTime.Now} BY com.fix8mt.ufe.ufeedclient.genconsts\n" +
	"package com.fix8mt.ufe.ufeedclient;\n" +
	"public class Consts {\n" +
	"	// UFE CONSTS\n");
			for (String ufeLine : Files.readAllLines(Paths.get(ufePath), Charset.defaultCharset())) {

				//eg. constexpr int64_t fix8_status(int64_t src) { return src + 70000; }
				Matcher matches = p1.matcher(ufeLine);
				if (matches.find())
					ufeOffsets.put(matches.group(1), Integer.parseInt(matches.group(2)));

				//eg. const int64_t session_flag_report { 0 };
				Matcher noOffsetsLineValue = p2.matcher(ufeLine);
				if (noOffsetsLineValue.find())
					bw.write(String.format("\tpublic static final int %s = %s;\n", noOffsetsLineValue.group(1).toUpperCase(), noOffsetsLineValue.group(2)));

				//eg. const int64_t ufe_all_services { 0x1ffff };
				Matcher noOffsetsLineValueHex = p3.matcher(ufeLine);
				if (noOffsetsLineValueHex.find())
					bw.write(String.format("\tpublic static final int %s = %s;\n", noOffsetsLineValueHex.group(1).toUpperCase(), noOffsetsLineValueHex.group(2)));

				//eg. const int64_t fix8_ok { fix8_status(0) };
				Matcher addOffsetLineValue = p4.matcher(ufeLine);
				if (addOffsetLineValue.find())
				{
					int offset = ufeOffsets.get(addOffsetLineValue.group(2));
					bw.write(String.format("\tpublic static final int %s = %d;\n", addOffsetLineValue.group(1).toUpperCase(), offset + Integer.parseInt(addOffsetLineValue.group(3))));
				}
			}
			int offset1 = ufeOffsets.get("ufe_common_fix");
			bw.write(String.format("\tpublic static final int UFE_COMMON_FIX = %d;\t", offset1));

			//Write UFEGW connection defaults
			bw.write("\n" +
			"\tpublic static final int UFE_FLOAT_PRECISION = 2;\n" +
			"\n" +
			"\t// UFEGW CONSTS\n" +
			"\tpublic static final String SUBSCRIBER = \"subscriber\";\n" +
			"\tpublic static final String SUBSCRIBER_DEFAULT = \"tcp://127.0.0.1:55745\";\n" +
			"\tpublic static final String REQUESTER = \"requester\";\n" +
			"\tpublic static final String REQUESTER_DEFAULT = \"tcp://127.0.0.1:55746\";\n" +
			"\tpublic static final String PUBLISHER = \"publisher\";\n" +
			"\tpublic static final String PUBLISHER_DEFAULT = \"tcp://*:55747\";\n" +
			"\tpublic static final String RESPONDER = \"responder\";\n" +
			"\tpublic static final String RESPONDER_DEFAULT = \"tcp://*:55748\";\n" +
			"\tpublic static final String SUBSCRIBER_TOPIC = \"subscribertopic\";\n" +
			"\tpublic static final String SUBSCRIBER_TOPIC_DEFAULT = \"ufegw-publisher\";\n" +
			"\tpublic static final String REQUESTER_TOPIC = \"requestertopic\";\n" +
			"\tpublic static final String REQUESTER_TOPIC_DEFAULT = \"ufegw-responder\";\n" +
			"\tpublic static final String PUBLISHER_TOPIC = \"publishertopic\";\n" +
			"\tpublic static final String PUBLISHER_TOPIC_DEFAULT = \"ufeedclient-publisher\";\n" +
			"\tpublic static final String RESPONDER_TOPIC = \"respondertopic\";\n" +
			"\tpublic static final String RESPONDER_TOPIC_DEFAULT = \"ufeedclient-responder\";\n" +
			"\n" +
			"\t// FIX CONSTS\n");

			for (String fixLine : Files.readAllLines(Paths.get(fixPath), Charset.defaultCharset())) {
				//eg. const f8String Common_MsgType_HEARTBEAT("0");
				Matcher commonLine = p5.matcher(fixLine);
				if (commonLine.find())
				{
					String name = commonLine.group(1).toUpperCase();
					String nameType = name.contains("MSGTYPE_") ? "String" : name.contains("MSGBYTE_") ? "char" : "int";
					bw.write(String.format("\tpublic static final %s %s = %s;\n", nameType, name, commonLine.group(2)));
				}
			}
			bw.write("}\n");
		}
	}
}
